def generate_architecture(model_name):
    model = AutoModelForCausalLM.from_pretrained(model_name)
    state_dict = model.state_dict()
    cube_list = []
    unique_layers = sorted(set(clean_layer_name(layer) for layer in state_dict.keys()))
    max_param_size = max(v.numel() for v in state_dict.values())
    min_param_size = min(v.numel() for v in state_dict.values())
    min_size = 0.5
    max_size = 2.0
    for layer, params in state_dict.items():
        param_size = params.numel()
        size = float(min_size + ((np.log(param_size) - np.log(min_param_size)) / (np.log(max_param_size) - np.log(min_param_size))) * (max_size - min_size))
        clean_name = clean_layer_name(layer)
        cube_list.append({
            'name': clean_name,
            'size': size,
            'param_count': param_size,
        })
    return cube_list
